package closure

import (
	"log"
	"sync"
	"time"
)

//‚è±Ô∏è –ó–ê–î–ê–ß–ê: Batcher —Å —Ç–∞–π–º–∞—É—Ç–æ–º
//üìã –û–ø–∏—Å–∞–Ω–∏–µ:
//–¢—ã –ø–∏—à–µ—à—å —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–∞—á–∫–æ–π:
//–µ—Å–ª–∏ —Å–æ–±—Ä–∞–ª–æ—Å—å N —à—Ç—É–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (flush);
//–µ—Å–ª–∏ –∑–∞ T —Å–µ–∫—É–Ω–¥ –Ω–µ —Å–æ–±—Ä–∞–ª–æ—Å—å N ‚Äî —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (flush "–Ω–µ–¥–æ–±–∏—Ç–æ–π" –ø–∞—Ä—Ç–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É).

func BatcherTimeoutPractice() {
	timeout := time.Second * 5
	limit := 3
	batcher := newButcherWithTimeout(limit, timeout, flush)

	batcher("event_1")
	batcher("event_2")
	batcher("event_3")

	batcher("event_4")
	//time.Sleep(time.Second * 10)
	batcher("event_5")
	//batcher("event_6")

	mainStopTimer := time.NewTimer(time.Second * 6)
	<-mainStopTimer.C
	log.Println("main is finished")

}
func newButcherWithTimeout(limit int, timeout time.Duration, flush func([]string)) (batchWithTimeout func(event string)) {
	var eventStore []string
	var mtx sync.Mutex
	var timer *time.Timer

	afterTimeoutFunc := func() {
		mtx.Lock()
		defer mtx.Unlock()

		if len(eventStore) > 0 {
			flush(eventStore)
			eventStore = eventStore[:0]
		}
	}

	resetTimer := func() {
		// –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
		// –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∑–Ω–∞—á–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π

		if timer == nil {
			timer = time.AfterFunc(timeout, afterTimeoutFunc)
		} else {
			timer.Stop()
			timer = time.AfterFunc(timeout, afterTimeoutFunc)
		}

	}

	return func(event string) {
		mtx.Lock()
		defer mtx.Unlock()

		eventStore = append(eventStore, event)
		if len(eventStore) >= limit {
			flush(eventStore)
			eventStore = eventStore[:0]
			if timer != nil { // –ø—Ä–æ–≤–µ—Ä—è–π, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–∞–Ω–∏–∫–∞
				timer.Stop()
			}
			return
		}

		resetTimer()

	}
}

func ChatnewButcherWithTimeout(limit int, timeout time.Duration, flush func([]string)) func(string) {
	var mu sync.Mutex
	var eventStore []string
	var timer *time.Timer

	// –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
	onTimeout := func() {
		mu.Lock()
		defer mu.Unlock()

		if len(eventStore) > 0 {
			flush(eventStore)
			eventStore = nil
		}
	}

	// –ê —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ / –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
	resetTimer := func() {
		if timer != nil {
			timer.Stop()
		}
		timer = time.AfterFunc(timeout, onTimeout)
	}

	return func(event string) {
		mu.Lock()
		defer mu.Unlock()

		eventStore = append(eventStore, event)

		if len(eventStore) >= limit {
			flush(eventStore)
			eventStore = nil
			if timer != nil {
				timer.Stop()
			}
			return
		}

		resetTimer()
	}
}
