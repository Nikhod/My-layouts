package func_is_argument

import (
	"fmt"
	"log"
	"sync"
)

// Storage - a storage of slice of int
type Storage struct {
	store []int
}

//-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-BUFFERED CHANNEL-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=
// üß† –í—ã–≤–æ–¥
//‚ùå –¢–≤–æ–π –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
//‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ —á—Ç–µ–Ω–∏—è ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –µ—Å–ª–∏ —Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—à—å, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –¥–æ —á—Ç–µ–Ω–∏—è
//(–∫–∞–∫ –≤ —Ç–≤–æ—ë–º —Å–ª—É—á–∞–µ).
//‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ, –∏ range –∑–∞–≤–µ—Ä—à–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

func (c *Storage) eachElementOfBufferedCup(pocket chan int, read func(pocketInRead chan int)) {
	for i := 0; i < len(c.store); i++ {
		pocket <- c.store[i]
	}

	close(pocket)
	read(pocket)

}

func BufferedCupPractice() {
	from := Storage{store: []int{12, 20, 13, 5, 100}}
	var pocketMain = make(chan int, len(from.store))

	from.eachElementOfBufferedCup(pocketMain, func(pocketInClosure chan int) {
		for value := range pocketInClosure {
			fmt.Println(value)
		}
	})

	log.Println("finish")
}

//-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-UNBUFFERED CHANNEL-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=

//// üß† –í—ã–≤–æ–¥
//–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö.
//–ò—Å–ø–æ–ª—å–∑—É–π defer close(chan) –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, –∏ range chan –¥–ª—è —á—Ç–µ–Ω–∏—è.
//–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ‚Äî sync.WaitGroup.

func (c *Storage) eachElementOfUnbufferedCup(wg *sync.WaitGroup, pocket chan int, read func(pocketInRead chan int)) {
	defer wg.Done()
	defer close(pocket)

	go read(pocket)
	for i := 0; i < len(c.store); i++ {
		pocket <- c.store[i]
	}

}

func UnbufferedCupPractice() {
	from := Storage{store: []int{12, 20, 13, 5, 100}}
	var wg sync.WaitGroup
	var pocketMain = make(chan int)

	wg.Add(1)
	from.eachElementOfUnbufferedCup(&wg, pocketMain, func(pocketInClosure chan int) {
		for value := range pocketInClosure {
			fmt.Println(value)
		}
	})

	wg.Wait()
	log.Println("finish")
}
