package closure

import (
	"encoding/json"
	"errors"
	"log"
	"os"
)

func EtlPractice() {
	fileName := "./sample_file.txt"

	tidyData := extract(fileName) // –∫–æ–Ω–Ω–µ–∫—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º

	transactions := tidyData() // –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞

	transactions = transform(transactions, filter, modifier) // —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç –∏ —Ñ–∏–ª—å—Ç–µ—Ä
	upload := load(transactions)                             // –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–∞—è —Ç–æ –ª–æ–≥–∏–∫–∞
	err := upload()                                          // –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	if err != nil {
		log.Println(err)
		return
	}

}

// ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π (ETL pipeline)
//–ú—ã –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
//
//Extract (–∑–∞–±—Ä–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ) ‚Üí
//Transform (–æ—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—ã) ‚Üí
//Load (–∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º –ë–î)

type transaction struct {
	ID     int
	Amount float64
	Valid  bool
}

//üí° –ì–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏—è
//–≠—Ç–∞–ø	 	|||–ß—Ç–æ –¥–µ–ª–∞–µ–º							|||Closure —Ç–∏–ø	|||–ü–æ—á–µ–º—É?
//Extract	|||–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞			|||–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (closure)		|||–ú–æ–∂–Ω–æ –∑–∞–º–∫–Ω—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
//Transform	|||–ü–µ—Ä–µ–¥–∞—ë–º –æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã	|||–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç	|||–ì–∏–±–∫–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
//Load		|||–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—É–¥–∞-—Ç–æ					|||–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (closure)		|||–ú–æ–∂–Ω–æ –∑–∞–º–∫–Ω—É—Ç—å "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"

// üîπ –ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–∑–∞–º–∫–Ω—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö¬ª (–≤ Extract)?
//	üí° –ò–¥–µ—è:
//	–¢—ã —Å–æ–∑–¥–∞—ë—à—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è ¬´–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç¬ª –∏—Å—Ç–æ—á–Ω–∏–∫ (–¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Ñ–∞–π–ª, —É–∫–∞–∑–∞—Ç–µ–ª—å, —Å—á—ë—Ç—á–∏–∫),
//	–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º.

func extract(filepath string) (tidyData func() []transaction) {
	file, _ := os.Open(filepath)
	defer func() {
		// todo file.close()
	}()

	return func() []transaction {
		var source []transaction
		_ = json.NewDecoder(file).Decode(&source)

		return nil
	}
}

func transform(transactions []transaction, filter func(transaction) bool, modifier func(*transaction) *transaction) []transaction {
	var result []transaction
	log.Println("transforming...")

	for _, trx := range transactions {
		if filter(trx) {
			result = append(result, *modifier(&trx))
		}
	}
	return result
}

func load(data []transaction) (upload func() error) {
	// –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –ª–æ–≥–∏–∫—É
	return func() error {
		for _, value := range data {
			ok := loadToDb(value)
			if !ok { // —ç–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
				return errors.New("couldn't load to db")
			}
		}
		return nil
	}
}

// helper functions:
func modifier(tx *transaction) *transaction {
	tx.Valid = true
	tx.ID += 10
	tx.Amount += 500
	log.Println("was modified")
	return tx
}

func filter(t transaction) bool {
	if t.ID < 0 || t.Amount < 10 || t.Valid == false {
		return false
	}
	log.Println("filter_Ok")
	return true
}

func removeElement(tx []transaction, index int) []transaction {
	if index+1 < len(tx) {
		right := tx[index+1:]
		tx = tx[:index]
		tx = append(tx, right...)
		log.Println("was removed")
		return tx
	} else {
		log.Println("was removed")
		return tx[:index]
	}
}

// –ø—É—Å—Ç—ã—à–∫–∞
func loadToDb(tx transaction) bool { return true }
