package closure

import "fmt"

// üì• –ó–ê–î–ê–ß–ê: Batcher ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
//üßæ –û–ø–∏—Å–∞–Ω–∏–µ:
//–¢—ã –ø–∏—à–µ—à—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π), –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
//–∏—Ö –ø–∞—á–∫–æ–π ‚Äî –Ω–µ –ø–æ –æ–¥–Ω–æ–º—É.
//–ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é NewBatcher(limit int, flush func([]string)), –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ func(event string).
//–≠—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è limit ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç flush —Å —ç—Ç–æ–π –ø–∞—á–∫–æ–π.

func BatcherPractice() {
	batch := newButcher(3, flush)
	for i := 0; i < 6; i++ {
		batch(fmt.Sprint("event_", i+1))
	}

}

func newButcher(limit int, flush func([]string)) func(string) {
	var eventStore []string // –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è, –∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–æ –∫—É—Å–æ—á–∫–∞–º –≤ flush(). –ú–æ–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
	var counter int
	var startIndex int

	return func(event string) {
		eventStore = append(eventStore, event)
		counter++
		if counter%limit == 0 { // –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π limit-—Ä–∞–∑
			flush(eventStore[startIndex:counter])
			startIndex = counter
			// –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º—ã –≤—ã–¥–∞–¥–∏–º –ø–∞—á–∫—É,
			// —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
			//eventStore = eventStore[:0] <---- reset store –¥–ª—è –±—É–¥—É—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
		}
	}
}

//	func flush(events []string) {
//		fmt.Println(events)
//	}
func flush(events []string) {
	fmt.Println(events)
}
